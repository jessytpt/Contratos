openapi: 3.0.0
info:
  title: API Fake store By Platzi 
  description: Products manage - search by id, create, update any delete
  version: v1

servers:
  - url: https://api.escuelajs.co/api/v1

tags:
  - name: products
    description: Information about products
  - name: categories
    description: Information about categories
  - name: users
    description: Information about users

paths:
  /products:
    get:
      tags:
        - products
      summary: List of all products
      operationId: getProducts
      parameters:
        - $ref: '#/components/parameters/token'
      responses:
        200:
          description: (OK) All Products list
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError"

  /products/{idProduct}:
    get:
      tags:
        - products
      summary: Get single product
      operationId: getProductsById
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/idProduct'
      responses:
        200:
          description: (OK) Product exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessProductGet'
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError"

  /products/:
    post:
      tags:
        - products
      summary: Create a new product
      operationId: createProduct
      parameters:
       - $ref: '#/components/parameters/token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyProductPost'
      responses:
        201:
          description: (OK) Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessProductPost'
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError"

  /products/{idProductUpdate}:
    put: 
      tags:
        - products
      summary: Update product by Id
      operationId: updateProduct
      parameters:
        - $ref: '#/components/parameters/token'
        - name: idProductUpdate
          in: path
          description: Identifier of product
          required: true
          schema:
            type: string
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyPrductUpdate'
      responses: 
        200:
          description: (OK) Product exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError"

  /products/{idProductDelete}:
    delete: 
      tags:
        - products
      summary: Delete product by Id
      operationId: deleteProduct
      parameters:
        - $ref: '#/components/parameters/token'
        - name: idProductDelete
          in: path
          description: Identifier of Product
          required: true
          schema:
            type: string
            example: 2
      responses: 
        200:
          description: (OK) Product delete
          content:
            application/json:
              schema:
                  type: boolean
                  example: true
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError"

  /categories:
    get:
      tags:
        - categories
      summary: get all categories 
      operationId: getCategories
      parameters:
        - $ref: '#/components/parameters/token'
      responses:
        200: 
          description: (OK) Categories List
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError"
            
  /categories/{idCategories}:
    get:
      tags:
        - categories
      summary: get a single category
      operationId: getCategoryById
      parameters:
        - $ref: '#/components/parameters/token'
        - name: idCategories
          in: path
          description: Identifier of category
          required: true
          schema:
            type: string
            example: 1
      responses:
        200:
          description: (OK) Product exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError"

  /categories/:
    post:
      tags:
        - categories
      summary: Create a category
      operationId: createCategory
      parameters:
         - $ref: '#/components/parameters/token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyCategoryPost'
      responses:
        200:
          description: (OK) Product exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError"

  /categories/{idCategoryUpdate}:
    put:
      tags:
        - categories
      summary: Update a category
      operationId: updateCategoryById
      parameters:
        - $ref: '#/components/parameters/token'
        - name: idCategoryUpdate
          in: path
          description: Identifier of category
          required: true
          schema:
            type: string
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                  description: Change name
                  example: Change name
      responses:
        200:
          description: (OK) Product exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError"
  
  /categories/{idCategoryDelete}:
    delete:
      tags: 
        - categories
      summary: Delete a category
      operationId: deleteCategory
      parameters:
        - $ref: '#/components/parameters/token'
        - name: idCategoryDelete
          in: path
          description: Identifier of category
          required: true
          schema:
            type: number
            example: 1 
      responses: 
        200:
          description: (OK) Category delete
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError"

  /categories/{idCategory}/products:
    get: 
      tags:
        - categories
      summary: get all products by category
      operationId: getProductsByCategory
      parameters:
        - $ref: '#/components/parameters/token'
        - name: idCategory
          in: path
          description: Identifier of category
          required: true
          schema:
            type: number
            example: 1
      responses:
        200:
          description: (OK) List Products by category
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError"

  /users:
    get: 
      tags:
       - users  
      summary: Users List
      operationId: getUsers
      parameters:
        - $ref: '#/components/parameters/token'
      responses:
        200:
          description: (OK) Users List
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError"
  
  /users/{idUser}:
    get:
      tags:
        - users
      summary: Get a singleg user
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/token'
        - name: idUser
          in: path
          description: Identifier of User
          required: true
          schema: 
            type: number
            example: 1
      responses:
        200:
          description: (OK) Product exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError"

  /users/:
    post:
      tags:
        - users
      summary: Create a user
      operationId: createUsers
      parameters:
        - $ref: '#/components/parameters/token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyUserPost'
      responses:
        200:
          description: (OK) Product exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError" 

  /users/{idUserPut}:
    put:
      tags: 
        - users
      summary: Update a user    
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/token'
        - name: idUserPut
          in: path
          description: Identifier of User
          required: true
          schema:
            type: number
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyUserPut'
      responses:
        200:
          description: (OK) User exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError" 

  /users/is-available:
    post:
      tags:
        - users
      summary: Verify if an email is alreafy registered in the API
      operationId: emailIsAvalible
      parameters:
        - $ref: '#/components/parameters/token'
        - name: email
          in: path
          description: email of user
          required: true
          schema:
            type: string
            example: "john@mail.com"
      responses: 
        200:
          description: (OK) Email avalible
          content:
            application/json:
              schema:
                  type: boolean
                  example: true
        400:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        401:
          description: (ERROR) Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        
        404:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
               $ref: "#/components/responses/NotFound"
        
        500:
          description: Ups! Something is wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServerError"


components:
  responses:
    Unauthorized:
      description: (Unauthorized) You are not authorized to call service.
    NotFound: 
      description: (Not Found) The requested information is not found.
    BadRequest:
      description: (BadRequest) The data sent is incorrect or there are mandatory fields.
    ServerError:
      description: (ServerError) Server failed.
  
  parameters:    
    token:
      name: Token
      in: header
      description: Token Authenticate
      required: true
      schema:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImpvaG5AbWFpbC5jb20iLCJzdWIiOjEsImlhdCI6MTY0Nzg3NTY5MywiZXhwIjoxNjQ3ODc5MjkzfQ.yrPEqd3YEgmxwEXq3SFy33bhV2jcIKc8BMGZfwuWyHM
    idProduct:
      name: idProduct
      in: path
      description: Product Id
      required: true
      schema:
        type: number
        example: 5

  schemas:
    BodyProductPost:
      type: object
      properties:
        title:
          type: string
          description: Product title
          example: New Product
        price:  
          type: number
          description: Price the product
          example: 1200
        description:
          type: string
          description: Description the product
          example: "A description"
        categoryId:
          type: number
          description: Object of category
          example: 1
        images:
          type: array
          description: List of images like URLs
          items:
            type: string
          example: ["https://placeimg.com/640/480/any", "url 2"]
    BodyPrductUpdate:
      type: object
      properties:
        title: 
          type: string
          description: Product title
          example: Change title
        price: 
          type: number
          description: Price the product
          example: 100
    BodyCategoryGet:
      type: object
      properties:
        id: 
          type: number
          description: The id of the category
          example: 1
        name:
          type: string
          description: Name of the product
          example: Clothes
        image: 
          type: string
          description: The string with URL to a image
          example: https://placeimg.com/640/480/any
    BodyCategoryPost:
      type: object
      properties:
        name:
          type: string
          description: category nameº
          example: New category
        image:
          type: string
          description: category image
          example: https://placeimg.com/640/480/any
    BodyUserGet:
      type: object
      properties:
        id:
          type: number
          description: The id of the user
          example: 1
        name:
          type: string
          description: The name of the user
          example: Jhon
        role:
          type: string
          description: The role of the user is customer or admin
          example: customer
        email:
          type: string
          description: The email of the user
          example: jhon@mail.com
        password:
          type: string
          description: The password of the user
          example: 123
    BodyUserPost:
      type: object
      properties:
        name:
          type: string
          description: The name of the user
          example: Nicolas
        email:
          type: string
          description: The email of the user
          example: nico@gmail.com
        password:
          type: string
          description: The password of the user
          example: 123
    BodyUserPut:
      type: object
      properties:
        name:
          type: string
          description: The name of the user
          example: Nicolas
        email:
          type: string
          description: The email of the user
          example: nico@gmail.com
    SuccessProductGet:
      type: object
      properties:
        id:
          type: number
          description: product id
          example: 5
        title:
          type: string
          description: product title
          example: "Awesome Fresh Shoes"
        price:
          type: number
          description: product price
          example: 253
        description:
          type: string
          description: product description
          example: "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles"
        category:
          type: object
          description: category informacionº
          properties:
            id:
              type: number
              description: category id
              example: 4
            name:
              type: string
              description: category name
              example: "Shoes"
            image:
              type: string
              description: category image
              example: "https://api.lorem.space/image/shoes?w=640&h=480&r=8789"
        images:
          type: array
          description: List of images like URLs
          items:
            type: string
          example:  [ "https://api.lorem.space/image/shoes?w=640&h=480&r=5516",
                      "https://api.lorem.space/image/shoes?w=640&h=480&r=7867",
                       "https://api.lorem.space/image/shoes?w=640&h=480&r=7254" ]
    SuccessProductPost:
      type: object
      properties:
        title:
          type: string
          description: product title
          example: "New Product"
        price:
          type: number
          description: product price
          example: 253
        description:
          type: string
          description: product description
          example: "A description"
        images:
          type: array
          description: List of images like URLs
          items:
            type: string
          example:  [ "https://api.lorem.space/image/shoes?w=640&h=480&r=5516",
                      "https://api.lorem.space/image/shoes?w=640&h=480&r=7867",
                       "https://api.lorem.space/image/shoes?w=640&h=480&r=7254" ]
        category:
          type: object
          description: category informacionº
          properties:
            id:
              type: number
              description: category id
              example: 4
            name:
              type: string
              description: category name
              example: "Category name"
            keyLoremSpace:
              type: string
              description: category name
              example: "fashion"
            image:
              type: string
              description: category image
              example: "https://api.lorem.space/image/shoes?w=640&h=480&r=8789"
        id:
          type: number
          description: product id
          example: 202
    Product:
      type: object
      properties:
        id:
          type: number
          description: product id
          example: 5
        title:
          type: string
          description: product title
          example: "Awesome Fresh Shoes"
        price:
          type: number
          description: product price
          example: 253
        description:
          type: string
          description: product description
          example: "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles"
        category:
          type: object
          description: category informacionº
          properties:
            id:
              type: number
              description: category id
              example: 4
            name:
              type: string
              description: category name
              example: "Shoes"
            image:
              type: string
              description: category image
              example: "https://api.lorem.space/image/shoes?w=640&h=480&r=8789"
        images:
          type: array
          description: List of images like URLs
          items:
            type: string
          example:  [ "https://api.lorem.space/image/shoes?w=640&h=480&r=5516",
                      "https://api.lorem.space/image/shoes?w=640&h=480&r=7867",
                       "https://api.lorem.space/image/shoes?w=640&h=480&r=7254" ]
    Category:
      type: object
      properties:
        id:
          type: number
          description: category id
          example: 5
        name:
          type: string
          description: product title
          example: "Category name"
        image:
          type: string
          description: url image
          example: "https://placeimg.com/640/480/any"
    User:
      type: object
      properties:
        id:
          type: number
          description: The id of the user
          example: 1
        name:
          type: string
          description: The name of the user
          example: "User name"
        role:
          type: string
          description: The role of the user is customer or admin
          example: "User role"
        email:
          type: string
          description: The email of the user
          example: "user@mail.com"
        password:
          type: string
          description: The password of the user
          example: 123
